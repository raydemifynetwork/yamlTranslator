import os
import yaml
import openai
import time
from collections import OrderedDict

# Configura√ß√£o da API OpenAI
client = openai.OpenAI(api_key="chaveaqui")

# Diret√≥rios de entrada e sa√≠da
pasta_entrada = "chaves"
pasta_saida = "chaves_traduzidos"

# Criar a pasta de sa√≠da se n√£o existir
if not os.path.exists(pasta_saida):
    os.makedirs(pasta_saida)


# Carregar YAML mantendo a ordem das chaves
def yaml_load_ordered(stream):
    """Carrega YAML mantendo a ordem das chaves."""

    class OrderedLoader(yaml.SafeLoader):
        pass

    def construct_mapping(loader, node):
        loader.flatten_mapping(node)
        return OrderedDict(loader.construct_pairs(node))

    OrderedLoader.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, construct_mapping)
    return yaml.load(stream, OrderedLoader)


# Salvar YAML mantendo a ordem das chaves
def yaml_dump_ordered(data, stream=None):
    """Salva YAML mantendo a ordem das chaves."""

    class OrderedDumper(yaml.SafeDumper):
        pass

    def dict_representer(dumper, data):
        return dumper.represent_mapping(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, data.items())

    OrderedDumper.add_representer(OrderedDict, dict_representer)

    return yaml.dump(data, stream, OrderedDumper, allow_unicode=True, default_flow_style=False)


# Fun√ß√£o para chamar a OpenAI e traduzir um arquivo inteiro
def chamar_openai_para_traducao(nome_arquivo, yaml_texto):
    """ Envia um arquivo inteiro para a API OpenAI para tradu√ß√£o. """
    prompt = f"""
O seguinte √© um arquivo de configura√ß√£o YAML para um servidor de Minecraft:

**Nome do arquivo:** {nome_arquivo}

**Texto original:** 

```yaml
{yaml_texto}
```

**Regras para tradu√ß√£o:**
- Traduza **todo o conte√∫do** para **portugu√™s do Brasil**.
- **Mantenha listas YAML no formato correto** (cada item com `- `).
- **N√ÉO traduza vari√°veis que come√ßam com `$`**. Elas s√£o placeholders e devem permanecer iguais.
- **Preserve c√≥digos de formata√ß√£o** (`&x`, `¬ßx`).
- **Mantenha a estrutura do YAML intacta.**
- **N√ÉO traduza os nomes das chaves e dicion√°rios. Apenas traduza os valores que n√£o s√£o chaves.**
- **N√£o adicione explica√ß√µes, retorne apenas o YAML traduzido.**

Agora, traduza:
"""

    print(f"üöÄ Enviando arquivo inteiro para tradu√ß√£o: {nome_arquivo}...")  # Log para depura√ß√£o

    tentativa = 0
    max_tentativas = 5

    while tentativa < max_tentativas:
        try:
            resposta = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um assistente especializado em tradu√ß√£o de arquivos YAML."},
                    {"role": "user", "content": prompt}
                ]
            )
            yaml_traduzido = resposta.choices[0].message.content.strip()

            print(f"‚úÖ Tradu√ß√£o conclu√≠da para {nome_arquivo}")
            return yaml_traduzido

        except openai.RateLimitError:
            print(f"‚ö†Ô∏è Rate Limit atingido. Tentando novamente... ({tentativa + 1}/{max_tentativas})")
            time.sleep(20)
            tentativa += 1

        except Exception as e:
            print(f"‚ùå Erro ao chamar OpenAI: {e}")
            return yaml_texto  # Retorna o original se der erro

    print("‚ùå Erro de Rate Limit n√£o resolvido ap√≥s m√∫ltiplas tentativas.")
    return yaml_texto


# Fun√ß√£o para processar os arquivos YAML inteiros
def traduzir_arquivos_yaml():
    """Traduz arquivos YAML inteiros ao inv√©s de linha por linha."""
    arquivos_yaml = sorted(os.listdir(pasta_entrada))

    for arquivo in arquivos_yaml:
        caminho_entrada = os.path.join(pasta_entrada, arquivo)
        caminho_saida = os.path.join(pasta_saida, arquivo)

        print(f"üìå Processando arquivo: {arquivo}")

        try:
            with open(caminho_entrada, "r", encoding="utf-8") as file:
                yaml_texto = file.read().strip()

        except Exception as e:
            print(f"‚ùå Erro ao ler o arquivo {arquivo}: {e}")
            continue

        # Se o arquivo estiver vazio, pula
        if not yaml_texto:
            print(f"‚ö†Ô∏è Arquivo vazio, pulando: {arquivo}")
            continue

        # Traduzir o arquivo inteiro
        yaml_traduzido = chamar_openai_para_traducao(arquivo, yaml_texto)

        # Salvar o arquivo traduzido
        with open(caminho_saida, "w", encoding="utf-8") as file:
            file.write(yaml_traduzido)

        print(f"‚úÖ Tradu√ß√£o salva para {arquivo}")


# Executar o script de tradu√ß√£o
traduzir_arquivos_yaml()

print(f"‚úÖ Todos os arquivos foram traduzidos e salvos em '{pasta_saida}/'.")
